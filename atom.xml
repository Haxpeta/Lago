<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lago</title>
  
  
  <link href="/Lago/atom.xml" rel="self"/>
  
  <link href="https://memorytoco.github.io/Lago/"/>
  <updated>2019-02-12T08:00:34.547Z</updated>
  <id>https://memorytoco.github.io/Lago/</id>
  
  <author>
    <name>Memorytoco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客功能说明</title>
    <link href="https://memorytoco.github.io/Lago/2019/02/12/blogIntro/"/>
    <id>https://memorytoco.github.io/Lago/2019/02/12/blogIntro/</id>
    <published>2019-02-11T23:36:26.000Z</published>
    <updated>2019-02-12T08:00:34.547Z</updated>
    
    <content type="html"><![CDATA[<p>简要的说明一下辅助博客的文章类别以及其作用吧.<br>如果使用结果不错的话, 就将它搬到<code>Lasga</code>中去.<br>最主要的也是方便阅读这个博客的人.</p><a id="more"></a><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>这篇博客的所有由文章暂分三类, 分别是<strong>笔记</strong>, <strong>漫谈</strong>, <strong>教程</strong>.</p><p>所有的笔记都是跟随一本书随阅读进度进行更新的, 内容主要是针对一些我觉得比较关键的点的罗列, 可能会附加一些个人的思考. 笔记自有一套自己的更新规则, 一般不会跟随书的目录章节更新, 而是受到自己的学习进程影响, 有时可能会针对某一个点额外的发布文章, 届时会在笔记中加入链接.</p><blockquote><p><code>笔记不一定十分准确</code>, 但会一直更新. 已发布的也会更新. 毕竟个人知识总会有差错, 随着个人经验的积累也会有进步嘛. 这个笔记是跟着我本地的笔记更新的, 一旦我有了比之前更加深刻的认识, 就会去更新笔记.</p></blockquote><blockquote><p>现在会在笔记开头部分写下更新时间. 以供参考.</p></blockquote><p>漫谈则如其名, 主题不明, 谈谈对于一些技术, 对于计算机科学理论的理解等等…</p><blockquote><p>已发布的漫谈一般不会再更新, 如有错误, 会另起一篇来说明.</p></blockquote><p>教程往往是有关一个主题的, 拥有一个唯一的<em>tag</em>, 可以在<em>tags</em>一栏中选择来进行阅读.具体的信息会在教程中进行发布.</p><blockquote><p>教程会随时间动态更新.</p></blockquote><p>以上…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简要的说明一下辅助博客的文章类别以及其作用吧.&lt;br&gt;如果使用结果不错的话, 就将它搬到&lt;code&gt;Lasga&lt;/code&gt;中去.&lt;br&gt;最主要的也是方便阅读这个博客的人.&lt;/p&gt;
    
    </summary>
    
    
      <category term="MISC" scheme="https://memorytoco.github.io/Lago/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>真象还原之零</title>
    <link href="https://memorytoco.github.io/Lago/2019/02/10/truthaboutSys_0/"/>
    <id>https://memorytoco.github.io/Lago/2019/02/10/truthaboutSys_0/</id>
    <published>2019-02-09T22:13:01.000Z</published>
    <updated>2019-02-12T08:01:51.370Z</updated>
    
    <content type="html"><![CDATA[<p>这个是阅读<strong>操作系统真象还原</strong>的笔记. 记录学习系统一些知识点.<br>同时和<strong>深入理解计算机操作系统</strong>一起. 希望学完系统能让我更加方便的学习汇编与二进制.</p><p>最后编辑时间: <code>2019-2-12</code><br><a id="more"></a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>常见 cpu 字节序:</p><ul><li>大端字节序: <code>IBM, Sun, PowerPC</code></li><li>小端字节序: <code>x86, DEC</code><blockquote><p><code>ARM</code> 系的大小通吃<br>网络字节序是大端字节序</p></blockquote></li></ul><hr><p>指令集与微架构:</p><p>对于指令集来说有两种指令体系, 分别是<code>CISC</code>和<code>RISC</code>两个.指令集则是类似于协议的存在.AMD 和 Intel使用同一种指令集,但是他们各自对于cpu的硬件实现不同,而这个<em>硬件实现</em>就称之为<em>微架构</em>.</p><p>目前存在的指令集共有5种, 分别是 <code>x86(Intel), ARM, MIPS, Power, C6000</code>.其中只有<code>x86</code>是是属于CISC体系的.</p><hr><p>整个系统的启动过程简述(个人理解):</p><p>电源通电后, 硬件开机自检. 硬件是如何知道这时候需要自检的呢? 是<strong>BIOS</strong>通知它们的.<strong>BIOS</strong> 如上所述, 是基本的输入输出系统. 没有太多的功能, 它的目的就是为了在整个开机接力赛中传递这第一棒. 在通知个硬件自检后, 它就会将接力棒传给<strong>MBR</strong>. <strong>MBR</strong>就是主引导程序. 如果折腾过linux, 那么可以把这个<strong>GRUB</strong>想象成<strong>MBR</strong>. 这么说或许就清楚点了.随后<strong>MBR</strong>会寻找<strong>OBR</strong>, 将主导权交给对应系统的引导程序. 可以把grup上的一些系统选项想象成系统引导程序. 最后, 主导权再由<strong>OBR</strong>交接给系统内核. 至此, 系统就正常启动啦.</p><blockquote><p>如果你不仅折腾过linux, 还想过把它和windows一起装在机器里, 那么你一定会使用双启动这方案. 折腾过双系统的人一定会碰到过这种情况:</p></blockquote><blockquote><p>在把linux安装完成后, 开机就是grub, windows则消失不见了. 如果需要再次引导windows则需要配置一下grbu才行. 反之, 如果在存在linux系统的情况下安装或者重装windows系统, 则会发现开机直接进入windows了. 出现这种情况是因为windows系统在安装的时候会把自己的引导程序放到<strong>MBR</strong>中去, 这就会造成机器启动的时候直接执行此时<strong>MBR</strong>上的内容. 这时候<strong>MBR</strong>上存放的是windows的引导器, 所以windows就会直接启动, linux就被撂在一旁,可怜兮兮,无人搭理.</p></blockquote><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li><code>elf</code> : <code>executable and linking format</code></li><li><code>readelf -e elf</code> 用来查询程序中段的类型. (其中 <code>elf</code> 是文件名)</li><li><code>GDT</code> : <code>Global Descriptor Table</code> 全局描述符表, 表中的每一项被称为段描述符.</li><li>描述符 : 描述某种数据的数据结构, 是元信息.</li><li>堆 : 程序运行过程中用于动态内存分配的内存空间, 由操作系统分配划分.</li><li>堆栈,栈 : 同指栈, 硬件必须.</li><li>大端字节序和小端字节序<blockquote><p>小端字节序是数值的低字节存放在内存的低地址出,高字节存放在高地址处.<br>大端字节序与小端字节序相反.</p></blockquote></li><li><code>IVT</code> : <code>Interrupt Vector Table</code> 中断向量表.</li><li><code>CISC</code> : <code>Complex Instruction Set Computer</code> 复杂指令集计算机</li><li><code>RISC</code> : <code>Reduced Instruction Set Computer</code> 精简指令集计算机</li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>我原本对<strong>位,比特,字节</strong>这些东西一直记不住,现在搞清了赶紧记下来.</p><blockquote><p>一个位即是一个 bit(比特),是最最小的数据单位,没有比它更小的了.</p></blockquote><blockquote><p>一个字节是 8 位,写作 byte, 换算关系为 <em>1 byte</em> = <em>8 bits</em> .<br>而内存的分布是以 byte 为基本单位的,也就是那些内存地址的单位都是 byte.</p></blockquote><p>另外一点容易弄混的是对于数据大小的判别. 首先分清这个十六进制数是一个存在内存里的数还是一个地址. 如果是数那么计算的单位是<code>bit</code>即位. 将这个数字换成一<code>二进制</code>串,其长度就是其大小,当然单位为<code>bit</code>. </p><blockquote><p>比如 <code>0xac2</code> 这个十六进制数所占的内存大小为12位,由于字节是8位,这里采用向上取整的方法为2字节. 二进制数为 <code>b101011000010</code>.</p></blockquote><p>如果是要看这个数本身的大小,则通过进制转换成十进制数即可.</p><blockquote><p>那么还是上面的例子, <code>0xac2</code> 这个数的大小可以通过十六进制转换为十进制即可.</p></blockquote><p>于是在具体的计算一个数字的”大小”的时候最好分清这个”大小”的意义所在.</p><hr><p>另外再提一句, 计算机内存是以<code>0</code>开始计算的. 同时, 对于一个地址从 <code>0x001</code> 到<code>0x003</code> 这样的一个地址段, 它的容量是<code>3</code>. 即末地址减去起始地址再加一.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个是阅读&lt;strong&gt;操作系统真象还原&lt;/strong&gt;的笔记. 记录学习系统一些知识点.&lt;br&gt;同时和&lt;strong&gt;深入理解计算机操作系统&lt;/strong&gt;一起. 希望学完系统能让我更加方便的学习汇编与二进制.&lt;/p&gt;
&lt;p&gt;最后编辑时间: &lt;code&gt;2019-2-12&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Note" scheme="https://memorytoco.github.io/Lago/categories/Note/"/>
    
    
      <category term="ComputerSystem Asm" scheme="https://memorytoco.github.io/Lago/tags/ComputerSystem-Asm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://memorytoco.github.io/Lago/2019/02/10/Hello-World/"/>
    <id>https://memorytoco.github.io/Lago/2019/02/10/Hello-World/</id>
    <published>2019-02-09T21:18:39.000Z</published>
    <updated>2019-02-12T07:57:08.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不-我没有放弃flax"><a href="#不-我没有放弃flax" class="headerlink" title="不, 我没有放弃flax!"></a>不, 我没有放弃flax!</h2><p>这里做一些说明吧.<br>基于现在的情况, 暂时使用<code>hexo</code>.</p><a id="more"></a><h3 id="现在你用了hexo建了博客-原来的flax呢"><a href="#现在你用了hexo建了博客-原来的flax呢" class="headerlink" title="现在你用了hexo建了博客,原来的flax呢?"></a>现在你用了<code>hexo</code>建了博客,原来的<code>flax</code>呢?</h3><p>emmm, 首先这两者不冲突. <code>flax</code> 的开发还在继续,并没有弃坑.</p><blockquote><p>我这个寒假一半的时间都耗在上面了,怎么可能弃坑呢! 并且我相信最终的它会给你们带来惊喜!</p></blockquote><p>然后主要现在在开发<code>flax</code>上遇挫, 遭遇了一个瓶颈.<br>一来迟迟不能让整个工作流程建立起来,<br>二来我也等不及了,<br>三来看到的一些东西让我对<code>flax</code>的期望(或者说是野心)增加了,结果让这个成型日期更加的延后.</p><h3 id="这个-Lago-是干什么的"><a href="#这个-Lago-是干什么的" class="headerlink" title="这个 Lago 是干什么的?"></a>这个 <code>Lago</code> 是干什么的?</h3><p>这个博客用于</p><ul><li>记笔记, 把一些想要分享的东西及时的贴出来</li><li>学习 <code>hexo</code>, 给 <code>flax</code> 铺路</li><li>进行知识输出</li><li>摸索自己的需求</li><li>作为一个辅助博客出现, 同时兼顾 <code>flax</code>的动态信息</li></ul><p>由于 <code>flax</code> 还在开发中, 我就没法着手关于博客页面相关的研究.<br>这就让整个进度异常缓慢, 非常摧残我的小心灵!! 所以这个博客就是一个试探.</p><blockquote><p>我在写<code>flax</code>的时候也对网站没什么概念, 用上这个来学习学习.</p></blockquote><blockquote><p>我最近一直在尝试建立起个人的学习体系, 其中的一环就是博客.<br>现在这个比重还在持续上升中.</p></blockquote><h3 id="那-flax-有什么动作吗"><a href="#那-flax-有什么动作吗" class="headerlink" title="那 flax 有什么动作吗?"></a>那 <code>flax</code> 有什么动作吗?</h3><p>有, 现在 <code>flax</code> 已经有了一个伪 <strong>hook</strong> 系统. 受到 <code>chez-scheme</code> 的逼迫,我不得不改变原先的工作机理, 摆脱对 <code>guile</code> 实现的依赖, 于是绞尽脑汁捉摸出了一个基于<strong>链表</strong> 这个数据结构的的系统, 终于可以在 <strong>新的</strong> 的实现上跑起来了.</p><blockquote><p>我也深刻的意识到了基本功的重要性. (转来转去, 我依然是在用我之前接触到的东西)</p></blockquote><p>出乎意料的是我发现这个改变得到的收益比我想象中的还要多. 于是我又想在这个基础上看看能不能琢磨出一个 <code>trigger</code> 系统出来, 再给它加上一些额外的支持.</p><p>由于原来的 <code>flax</code> 是我基于 <a href="https://dthompson.us/projects/haunt.html" target="_blank" rel="noopener">guile haunt</a> 一点一点<code>抄</code> 过来的, 所以有很多的思路都受到限制( 还是我自己脑补的思路… ), 现在正在努力的一点一点突破限制.</p><p>我现在还在继续扩展<code>flax</code>, 并且边用 <code>hexo</code> 边观察它的运作方式. 希望获得启发吧.</p><h2 id="所谓的-Flax-动态在哪里"><a href="#所谓的-Flax-动态在哪里" class="headerlink" title="所谓的 Flax 动态在哪里?"></a>所谓的 <code>Flax</code> 动态在哪里?</h2><p>在这个博客的页面可以看到一栏 <code>Flax</code>, 那里有一些关于 <code>Flax</code> 的信息.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不-我没有放弃flax&quot;&gt;&lt;a href=&quot;#不-我没有放弃flax&quot; class=&quot;headerlink&quot; title=&quot;不, 我没有放弃flax!&quot;&gt;&lt;/a&gt;不, 我没有放弃flax!&lt;/h2&gt;&lt;p&gt;这里做一些说明吧.&lt;br&gt;基于现在的情况, 暂时使用&lt;code&gt;hexo&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Misc Flax Hexo" scheme="https://memorytoco.github.io/Lago/tags/Misc-Flax-Hexo/"/>
    
  </entry>
  
</feed>
